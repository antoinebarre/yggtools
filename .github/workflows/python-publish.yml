# # This workflow will upload a Python Package to PyPI when a release is created
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.

# name: Upload Python Package

# on:
#   push:

# permissions:
#   contents: read

# jobs:
#   release-build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v4

#       - uses: actions/setup-python@v5
#         with:
#           python-version: "3.x"

#       - name: Build release distributions
#         run: |
#           # NOTE: put your own distribution build steps here.
#           python -m pip install build
#           python -m build

#       - name: Upload distributions
#         uses: actions/upload-artifact@v4
#         with:
#           name: release-dists
#           path: dist/

#   pypi-publish:
#     runs-on: ubuntu-latest
#     needs:
#       - release-build
#     permissions:
#       # IMPORTANT: this permission is mandatory for trusted publishing
#       id-token: write

#     # Dedicated environments with protections for publishing are strongly recommended.
#     # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
#     environment:
#       name: pypi
#       # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
#       # url: https://pypi.org/p/YOURPROJECT
#       #
#       # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
#       # ALTERNATIVE: exactly, uncomment the following line instead:
#       # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

#     steps:
#       - name: Retrieve release distributions
#         uses: actions/download-artifact@v4
#         with:
#           name: release-dists
#           path: dist/

#       - name: Publish release distributions to PyPI
#         uses: pypa/gh-action-pypi-publish@release/v1
#         with:
#           packages-dir: dist/

name: release

on:
  push:
    # tags:
    #   - "[0-9]+.[0-9]+.[0-9]+"
    #   - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
    #   - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
    #   - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "yggtools"
  OWNER: "AbarreCodes"

jobs:
  # unit-test:
  #   uses: arjancodes/bragir/.github/workflows/test.yaml@main

  details:
    runs-on: ubuntu-latest
    # needs: unit-test
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Check Ref Type
        if: github.ref_type != 'tag'
        run: echo "This is not a tag; exiting"; exit 1

      - name: Extract tag and Details
        id: release
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
          SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

      - name: Debug Outputs
        if: env.RUNNER_DEBUG
        run: |
          echo "Version is $NEW_VERSION"
          echo "Suffix is $SUFFIX"
          echo "Tag name is $TAG_NAME"

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  setup_and_build:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        # Resolves Python Version from .python-version file if no python-version is provided
        uses: actions/setup-python@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Bump version
        run: |
          NEW_VERSION="${{ needs.details.outputs.new_version }}"
          sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"$NEW_VERSION\"/" $GITHUB_WORKSPACE/pyproject.toml

      - name: Install dependencies
        run: uv sync

      - name: Build source and wheel distribution
        run: uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Publish to PyPI
        run: uv publish

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    env:
      TAG_NAME: ${{ needs.details.outputs.tag_name }}
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to avoid issues with tags and branches

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        run: gh release create ${{ env.TAG_NAME }} dist/* --title ${{ env.TAG_NAME }} --generate-notes
        env:
          GH_TOKEN: ${{ github.token }}

  bump_homebrew_formula:
    name: Dispatch event to Repo B
    needs: [details, github_release, pypi_publish]
    runs-on: ubuntu-latest
    environment:
      name: release
    env:
      FORMULA_VERSION: ${{ needs.details.outputs.new_version }}
    steps:
      - name: Dispatch Repository Dispatch event
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.BREW_TAP_TOKEN }}
          repository: ArjanCodes/homebrew-core
          event-type: "update-formula"
          client-payload: |-
            { 
              "formula_version": "${{ env.FORMULA_VERSION }}", 
              "formula_url": "${{ env.FORMULA_URL }}", 
              "formula_name": "${{ env.FORMULA_NAME }}"
            }
        env:
          FORMULA_NAME: ${{ env.PACKAGE_NAME }}
          FORMULA_URL: https://github.com/${{ env.OWNER }}/${{ env.PACKAGE_NAME }}/releases/download/${{ env.FORMULA_VERSION }}/${{ env.PACKAGE_NAME }}-${{ env.FORMULA_VERSION }}.tar.gz

  bump_version:
    needs: [details, github_release, pypi_publish]
    runs-on: ubuntu-latest
    env:
      NEW_VERSION: ${{ needs.details.outputs.new_version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to avoid issues with tags and branches

      - name: Bump version
        run: |
          NEW_VERSION=${{ env.NEW_VERSION }}
          sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"$NEW_VERSION\"/" $GITHUB_WORKSPACE/pyproject.toml

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Bumping version to ${{ env.NEW_VERSION }}
          branch: bump-version-${{ env.NEW_VERSION }}
          file_pattern: "pyproject.toml"
          skip_dirty_check: true
          create_branch: true